結果 
最近 は 空き 時間 を 見つけ て は 自作 コンパイラ の 実装 を 進める を し て い まし た ． 結果 ， 以下 の よう な 簡単 な コード を コンパイル できる よう に なり まし た ． コンパイラ と はいっ て も ， ソース コード の 構文 を 解析 し て ， 中間 パス を 作っ て アセンブリ の コード を 吐く もの です ． 
ちゃんと って 帰っ て き ます ． すごい ． 
作成 方法 
基本 的 に は Rui Ueyama さん の 低 レイヤ を 知り たい 人 の ため の C コンパイラ 作成 入門 を 参考 に し ながら 作成 し まし た ． あと は ちょくちょく 調べ ながら ． 
また ， 私 が 作っ た コンパイラ は 以下 の よう な 感じ で 動作 し て い ます ． 
入力 文字 列 を トー クン 列 に 分解 する ． 
簡単 に 言え ば 入力 の 文字 列 に 含ま れ て いる スペース を 取り除い て 意味 の ある 文字 列 単位 で 分割 を 行う 作業 です ． 
例えば ， 上 の 
という コード は ， , , , , ,…, の よう に 分解 する ， といった 作業 に なり ます ． 
トー クン 列 を 解析 し て 意味 構造 を 作る 
生成 規則 を 用い て 文法 を 定義 し ます ． 生成 規則 を 用い た 意味 構造 は 木 で 表現 さ れ ， 木 を 抽象 構文 木 と いい ます ． たとえば ， という 数式 の 場合 ， 以下 の よう な 構文 木 に なり ます ． 
しかし ， コンパイラ における パーサ が 果たし たい 役割 は ， ” 生成 規則 に 則っ て コード を 生成 する こと ” で は なく ， ” 展開 する と 入力 の 文字 列 に なる 展開 手順 ， すなわち 構文 木 の 構造 を 知る ” こと です ． 
その ため ， パーサ で は ， 一つ 一つ の 非終端 記号 を 関数 （ 木 における ノード ） に マップ し て いく 形 で 実装 を し ます ． 
上述 の 数式 の 場合 は ， 以下 よう な 関数 の 呼び出し 関係 と なっ て い ます ． 
アセンブリ の 出力 
トークナイズ と パース が でき たら ， あと は アセンブリ を 出力 する だけ です ． 意味 構造 を 対応 する 命令 に 変換 し て 出力 し ます ． 
感想 
めちゃくちゃ 勉強 に なり ます ． あと ， データ 構造 の 大切 さ を とても 感じ まし た ． 目標 は セルフ ホスト の コンパイラ な ので ， 引き続き 実装 し て いき たい と 思い ます ． （ C を 実際 に コンパイル できる よう に なれ たら 嬉しい な ） 
