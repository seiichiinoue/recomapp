boost - python を 使う 
経緯 
最近 実装 し て いる トピック モデル は ， 計算 量 の 都合 上 C ++ で 書い て い た ん です が ， 学習 後 の 潜在 座標 を 可視 化 する のに ， Python の プロット ツール を 使え ない か と 思い ， モデル の Python ラッパー を 書い て みよ う という こと で Boost を 使っ て みる こと に し まし た ． 
トピック モデル の 実装 について は 後日 また ブログ に 実験 結果 と 解説 記事 を 掲載 する 予定 です ． 
ビルド 
自分 は MacOS で 開発 を 行っ て いる ので ， HomeBrew を 使用 し て ビルド し まし た ． （ めちゃくちゃ 簡単 ） 
注意 す べき 点 として は ， brew で ビルド さ れる ライブラリ は 基本 的 に mac 標準 搭載 の もの （ 今回 は Python に 依存 し て いる ので Python の バージョン は mac 標準 の 2 . 7 ） に なり ます ． な ので ， で は なく ， を 指定 し て インストール し なけれ ば いけ ませ ん ． 
多分 これ で 入っ てる はず です ． 無事 インストール が 完了 し て い たら ， 下 に （ x は インストール に 使用 し た brew で インストール し て いる python 3 . x の バージョン ） が 存在 し て いる はず です ． ここ で 表示 さ れ た という ライブラリ を コンパイル 時 に 指定 し ます ． 
追記 : Linux で ， apt - get を 使用 し て ビルド し た 場合 は に あり ます ． 
次に ， boost - python を 使う に は ， python の config ファイル の パス を通して あげ ない と いけ ない よう な ので ， の 場所 を 確認 し ます ． （ これ を リンク し て あげ ない と リンク エラー が 出 て しまう ） 
追記 : Linux の 場合 は ， に あり ます ． 
これ を ( bash | zsh ). rc か 何 か に export し て あげ て ， 
これ で 完了 です ． 
使用 例 
それでは 実際 に boost - python を 使っ て 見 ましょ う ． 何 が できる か を 簡単 に いう と ， C ++ で 書い た 関数 や クラス を python 側 で 呼び出す こと が できる という もの です ． 他 に も を 使っ た 方法 など 色々 ある らしい です が ， 便利 そう だっ た Boost を 使う こと に し まし た ． 
とりあえず 簡単 な もの から ． 以下 の よう な 2 つ の 数 を 足す 簡単 な 関数 を python から 呼び出せる よう に し ます ． 
これ で 完了 です ． 必要 な ファイル を リンク し て ， コンパイル し ます ． 出力 ファイル は と し ます ． 
コンパイル が 完了 し たら ， python から 関数 を 呼び出し て み ます ． 
こんな 感じ で ， 簡単 に ラッパー を 作る こと が でき ます ． 以上 ． 
See Also 
