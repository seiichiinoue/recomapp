Binary Indexed Tree の 実装 
Binary Indexed Tree と は 
簡単 に 説明 する と ， BIT ， または フェニック 木 は ， ある 変数 列 の 部分 和 の 計算 と 要素 の 更新 を 効率 よく できる 木 構造 です ． 
どういう 時 に 嬉しい か と いう と ， 例 を 見る の が 早い と 思い ます ． 以下 の よう な 問題 設定 に 適用 でき ます ． 
AOJ - The Number of Inversions 
AOJ - Range Sum Query 
簡単 に BIT の アイデア を 理解 する ため に ， 以下 の よう な 基本 的 な 問題 を 考え ます ． 
個 の 変数 
以下 の 2 種類 の クエリ を で 実現 する 
に を 加える 
prefix [ 1 , a ] の ところ の 和 を 求める ． 
冒頭 に 述べ た とおり ， BIT は 木 構造 で データ を 保持 し ます ． （ 実際 は 長 さ N の 配列 で 実現 し ます ） 
木 構造 は 以下 の よう に なっ て い ます ． 青い ノード が 実際 に 配列 で 管理 する 要素 に なり ます ． 
深 さ の 二 分木 と なっ て おり ， 以下 の よう な 法則 で 配列 に 値 を 保持 し て い ます ． 
各 ノード に は ， 部分 木 の 要素 の 和 が 格納 さ れ て いる ． 
それぞれ の ノード が 管理 し て いる 区間 の 長 さ を 番号 ( 10 進 ) で 表示 し た とき ， 二 進数 で みる と ， 二 進数 の 最も 下 の ” 1 ” が 立っ て いる ビット が 区間 の 長 さ に 対応 する ． 
見 たら わかる とおり です が ， この よう な データ 構造 に する こと で ， 変数 の 更新 は ， 最大 で も 木 の 深 さ 回 の 更新 ， 区間 の 和 の 算出 も 同様 に 木 の 深 さ 回 の 計算 ， つまり で 実現 でき そう です ． 
具体 的 に 最大 の ケース を 考える と ， 変数 の 更新 は ， の 更新 が 変更 回数 が 最大 で ， 
の 値 を 更新 
親 ノード の の 値 を 更新 
親 ノード の の 更新 
親 ノード の の 更新 
の 4 回 で ， の 区間 に 足し算 を する こと に なり ます ． 
また ， 区間 の 和 で は ， が 最大 で ， 
を とる 
を 足す 
を 足す 
という 感じ で こちら も オーダー に 収まっ て い ます ． 
[ 補足 ] N は 2 ベキ で は なく て も BIT の 構築 は 可能 らしい です ． 
実装 方法 
冒頭 で も 少し 触れ た とおり ， 木 構造 を 長 さ の 配列 で インデックス の 振り 方 を 工夫 し ながら 表現 し ます ． 
まず ， index の 振り 方 です が ， 以下 の よう に 各 要素 （ ノード ） の 管理 し て いる 区間 の 長 さ を 二 進 表記 に し ます ． 
すると ， 長 さ N の 配列 を BIT と し た とき ， BIT [ x ] が 管理 する 区間 の 長 さ は ， x の 最も 下 の ” 1 ” が 立っ て いる ビット に なっ て いる こと が わかり ます ． 
例えば ， BIT [ 4 ] が 管理 し て いる 区間 の 長 さ は ， 2 で ， 4 を 2 進 表記 に する と 0110 ， 最も 下 の ” 1 ” が 立っ て いる ビット は 2 な ので 長 さ は 2 ． 
以下 は 計算 方法 の 話 に なり ます が ， 次 の よう に 最も 下 の ” 1 ” が 立っ て いる ビット を 取り出す こと が できる ので 覚え ましょ う ． 
また ， 変数 の 更新 は 次 の よう に なり ます ． ある 要素 を 更新 し た 時 ， 次に 更新 す べき 区間 は ， 番号 に 区間 の 長 さ を 足す と も とまる という こと に なり ます ． 
コード で 書く と 以下 の よう に なり ます ． 
そして ， 区間 の 和 の 計算 は 以下 の よう に なり ます ． ある 要素 まで の 区間 和 を 計算 し 始め た 時 ， 次に 足す べき 区間 は 番号 から 区間 の 長 さ を 引い た もの に なり ます ． 
コード で 書く と 以下 の よう に なり ます ． 
これら を まとめ て ， 構造 体 に する と ， 
こんな 感じ に なり ます ． 完成 です ． 
実際 に 使用 する 際 に は ， 以下 の 2 点 に 注意 し て 使用 し なけれ ば いけ ませ ん ． 
数列 の 要素 に 0 以下 の もの が ある と 要素 の 追加 が でき ない ので ， 下駄 を 履か せる 必要 が あり ます ． これ は ， bit の 初期 化 の 値 を 0 以外 の 何 か で 代用 する こと で 対応 でき そう です ． 
数列 の サイズ は N より も 大きく ない と いけ ませ ん ． index を 1 から 始める 際 は N + 1 に し て おけ ば 大丈夫 そう です ． 
おわり に 
データ 構造 や アルゴリズム って 理解 する の は もちろん です が ， 説明 する の って 難しい です ね ． 
そんな こと より 最近 「 青春 ブタ 野郎 は バニーガール 先輩 の 夢 を 見 ない 」 を 見 た ん です が ， 筆者 は 麻衣 さん に 恋 を し て しまい ， 超え られ ない ” 次元 の ” 壁 を 痛感 し て おり 大変 辛い 日々 を 過ごし て い ます ． 恋愛 の 猛者 は アドバイス いただける と 幸い です ． 何卒 よろしく お願い いたし ます ． 
参照 
Binary Indexed Tree の はなし 
転倒 数 アルゴリズム 
