今回は，コンパイルは通ったのに実行時にエラーが出てしまった件について．
問題のコードはこちら．ちょっとややこしいdpです（競プロですね）
segfault
segmentation faultとは，アクセスが許可されていない方法でメモリ上の位置にアクセスしようとするときに起こるエラー条件．
例えば，read onlyの位置に書き込みをしようとした時や，OSの部分を上書きしようとした時に起こる．C++だと，初期化時の配列の大きさを超えて要素を指定しようとしたとき(index error)や，ポインタ変数が指しているアドレスがNULLの時，また再帰が深すぎたり無限再帰が起きている場合などにセグフォが発生する．
デバッグ
macにはデフォルトでlldbというデバッガが入っているのでそれを使用してどこでセグフォが起きているのか確認する．(linuxだとgdbで実行できる)
lldbの使い方は簡単で，対象のコードをオプションをつけてコンパイルしたのち，で実行し，コマンドを実行すればデバッグを行ってくれる．
実際に行ってみると以下のようになる．
dpという配列にアクセスしたときにセグフォが起きているということがわかった．
C++では，グローバル変数はヒープに取られるのに対して，ローカル変数はスタックに積まれていく．なので関数（今回の例ではmain関数）などの中では大きな配列は確保できないらしい．
今回は，main関数の中でサイズの大きい配列をローカル変数として定義していたのがよくなかったことになるので，配列をグローバルに置くことにする．
再度デバッグを行う．
セグフォが解消されていることがわかる．
補足
は非常に有能で様々なcheckができる．
backtrace: 関数の呼び出し順を確認．lldbコマンドは．
frame n: backtraceで表示されている関数のうち，n番目の関数に移動．lldbコマンドは．
info locals: ローカル変数の一覧を確認．lldbコマンドは
info args: 引数の一覧を確認．lldbコマンドは
print val: 変数valの値を表示
