自作C(風)コンパイラの作成
結果
最近は空き時間を見つけては自作コンパイラの実装を進めるをしていました．結果，以下のような簡単なコードをコンパイルできるようになりました．コンパイラとはいっても，ソースコードの構文を解析して，中間パスを作ってアセンブリのコードを吐くものです．
ちゃんとって帰ってきます．すごい．
作成方法
基本的にはRui Ueyamaさんの低レイヤを知りたい人のためのCコンパイラ作成入門を参考にしながら作成しました．あとはちょくちょく調べながら．
また，私が作ったコンパイラは以下のような感じで動作しています．
入力文字列をトークン列に分解する．
簡単に言えば入力の文字列に含まれているスペースを取り除いて意味のある文字列単位で分割を行う作業です．
例えば，上の
というコードは，, , , , ,…, のように分解する，といった作業になります．
トークン列を解析して意味構造を作る
生成規則を用いて文法を定義します．生成規則を用いた意味構造は木で表現され，木を抽象構文木といいます．たとえば，という数式の場合，以下のような構文木になります．
しかし，コンパイラにおけるパーサが果たしたい役割は，”生成規則に則ってコードを生成すること”ではなく，”展開すると入力の文字列になる展開手順，すなわち構文木の構造を知る”ことです．
そのため，パーサでは，一つ一つの非終端記号を関数（木におけるノード）にマップしていく形で実装をします．
上述の数式の場合は，以下ような関数の呼び出し関係となっています．
アセンブリの出力
トークナイズとパースができたら，あとはアセンブリを出力するだけです．意味構造を対応する命令に変換して出力します．
感想
めちゃくちゃ勉強になります．あと，データ構造の大切さをとても感じました．目標はセルフホストのコンパイラなので，引き続き実装していきたいと思います．（Cを実際にコンパイルできるようになれたら嬉しいな）
See Also
